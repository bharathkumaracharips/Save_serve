{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/psbharathkumarachari/save_serve_complete/owner/owner/src/app/components/StudentManagement.tsx"],"sourcesContent":["\"use client\"\n\nimport React, { useState } from \"react\"\nimport { Table, Button, Modal, Form, Input, message } from \"antd\"\nimport { PlusOutlined, KeyOutlined } from \"@ant-design/icons\"\n\ninterface Student {\n  id: string\n  name: string\n  email: string\n}\n\n// Temporary student data\nconst mockStudents: Student[] = [\n  { id: \"1\", name: \"John Doe\", email: \"john@example.com\" },\n  { id: \"2\", name: \"Jane Smith\", email: \"jane@example.com\" },\n  { id: \"3\", name: \"Mike Johnson\", email: \"mike@example.com\" },\n  { id: \"4\", name: \"Sarah Williams\", email: \"sarah@example.com\" },\n  { id: \"5\", name: \"David Brown\", email: \"david@example.com\" },\n]\n\nexport function StudentManagement() {\n  const [students, setStudents] = useState<Student[]>(mockStudents)\n  const [isRegisterModalVisible, setIsRegisterModalVisible] = useState(false)\n  const [isResetModalVisible, setIsResetModalVisible] = useState(false)\n  const [selectedStudent, setSelectedStudent] = useState<Student | null>(null)\n  const [form] = Form.useForm()\n\n  const handleRegister = async (values: { email: string; password: string }) => {\n    try {\n      // Add new student to the temporary list\n      const newStudent = {\n        id: Date.now().toString(),\n        name: values.email.split(\"@\")[0], // Mock name from email\n        email: values.email,\n      }\n      setStudents([...students, newStudent])\n      message.success(\"Student registered successfully\")\n      setIsRegisterModalVisible(false)\n      form.resetFields()\n    } catch (error) {\n      message.error(\"Failed to register student\")\n    }\n  }\n\n  const handleResetPassword = async (values: { newPassword: string }) => {\n    try {\n      // In a real app, this would call an API to reset the password\n      message.success(`Password reset for ${selectedStudent?.email}`)\n      setIsResetModalVisible(false)\n    } catch (error) {\n      message.error(\"Failed to reset password\")\n    }\n  }\n\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      key: \"name\",\n    },\n    {\n      title: \"Email\",\n      dataIndex: \"email\",\n      key: \"email\",\n    },\n    {\n      title: \"Actions\",\n      key: \"actions\",\n      render: (_: any, record: Student) => (\n        <Button\n          type=\"primary\"\n          icon={<KeyOutlined />}\n          onClick={() => {\n            setSelectedStudent(record)\n            setIsResetModalVisible(true)\n          }}\n        >\n          Reset Password\n        </Button>\n      ),\n    },\n  ]\n\n  return (\n    <div>\n      <div className=\"flex justify-between items-center mb-4\">\n        <h2 className=\"text-2xl font-bold\">Student Management</h2>\n        <Button\n          type=\"primary\"\n          icon={<PlusOutlined />}\n          onClick={() => setIsRegisterModalVisible(true)}\n        >\n          Register New Student\n        </Button>\n      </div>\n\n      <Table \n        dataSource={students} \n        columns={columns} \n        rowKey=\"id\"\n        pagination={{ pageSize: 5 }}\n      />\n\n      <Modal\n        title=\"Register New Student\"\n        open={isRegisterModalVisible}\n        onCancel={() => {\n          setIsRegisterModalVisible(false)\n          form.resetFields()\n        }}\n        footer={null}\n      >\n        <Form form={form} onFinish={handleRegister} layout=\"vertical\">\n          <Form.Item\n            name=\"email\"\n            label=\"Email\"\n            rules={[\n              { required: true, message: \"Please input email\" },\n              { type: \"email\", message: \"Please input valid email\" },\n            ]}\n          >\n            <Input placeholder=\"Enter student email\" />\n          </Form.Item>\n          <Form.Item\n            name=\"password\"\n            label=\"Password\"\n            rules={[{ required: true, message: \"Please input password\" }]}\n          >\n            <Input.Password placeholder=\"Enter password\" />\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" block>\n              Register\n            </Button>\n          </Form.Item>\n        </Form>\n      </Modal>\n\n      <Modal\n        title={`Reset Password for ${selectedStudent?.email}`}\n        open={isResetModalVisible}\n        onCancel={() => {\n          setIsResetModalVisible(false)\n        }}\n        footer={null}\n      >\n        <Form onFinish={handleResetPassword} layout=\"vertical\">\n          <Form.Item\n            name=\"newPassword\"\n            label=\"New Password\"\n            rules={[{ required: true, message: \"Please input new password\" }]}\n          >\n            <Input.Password placeholder=\"Enter new password\" />\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" block>\n              Reset Password\n            </Button>\n          </Form.Item>\n        </Form>\n      </Modal>\n    </div>\n  )\n} "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 336, "column": 0}, "map": {"version":3,"sources":["file:///Users/psbharathkumarachari/save_serve_complete/owner/owner/src/app/students/page.tsx"],"sourcesContent":["\"use client\"\n\nimport { StudentManagement } from \"../components/StudentManagement\"\n\nexport default function StudentsPage() {\n  return (\n    <main>\n      <div className=\"pt-24 px-4\">\n        <StudentManagement />\n      </div>\n    </main>\n  )\n} "],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIe,SAAS;IACtB,qBACE,6LAAC;kBACC,cAAA,6LAAC;YAAI,WAAU;sBACb,cAAA,6LAAC,iJAAA,CAAA,oBAAiB;;;;;;;;;;;;;;;AAI1B;KARwB","debugId":null}}]
}