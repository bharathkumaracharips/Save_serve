{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/psbharathkumarachari/save_serve_complete/owner/owner/src/app/scan/page.tsx"],"sourcesContent":["\"use client\"\n\nimport React, { useState, useEffect, useRef } from 'react'\nimport { Html5QrcodeScanner, Html5QrcodeSupportedFormats } from 'html5-qrcode'\nimport { message } from 'antd'\nimport { Loader2 } from 'lucide-react'\n\ninterface ValidationResult {\n  success: boolean\n  message: string\n  studentName?: string\n  mealType?: string\n  usedAt?: string\n}\n\nexport default function ScanPage() {\n  const [validating, setValidating] = useState(false)\n  const [validationResult, setValidationResult] = useState<ValidationResult | null>(null)\n  const scannerRef = useRef<Html5QrcodeScanner | null>(null)\n  const lastScannedCode = useRef<string | null>(null)\n  const scanTimeoutRef = useRef<NodeJS.Timeout | null>(null)\n\n  useEffect(() => {\n    // Clear any existing scanner instance first\n    if (scannerRef.current) {\n      scannerRef.current.clear()\n    }\n\n    // Create new scanner instance with optimized settings\n    scannerRef.current = new Html5QrcodeScanner(\n      \"qr-reader\",\n      { \n        fps: 5, // Reduced from 10 to 5 to decrease processing load\n        qrbox: { width: 250, height: 250 },\n        aspectRatio: 1.0,\n        disableFlip: false,\n        formatsToSupport: [Html5QrcodeSupportedFormats.QR_CODE], // Only look for QR codes\n      },\n      false // verbose mode off\n    )\n\n    // Start scanning\n    scannerRef.current.render(\n      async (decodedText) => {\n        // Prevent duplicate scans within 5 seconds\n        if (lastScannedCode.current === decodedText) {\n          return\n        }\n\n        // Clear any existing timeout\n        if (scanTimeoutRef.current) {\n          clearTimeout(scanTimeoutRef.current)\n        }\n\n        lastScannedCode.current = decodedText\n        await validateQRCode(decodedText)\n\n        // Reset lastScannedCode after 5 seconds\n        scanTimeoutRef.current = setTimeout(() => {\n          lastScannedCode.current = null\n        }, 5000)\n      },\n      (error) => {\n        // Only log critical errors, ignore common \"not found\" messages\n        if (typeof error === 'string' && \n            !error.includes('No MultiFormat Readers') && \n            !error.includes('No barcode or QR code detected')) {\n          console.error('Scanner error:', error)\n        }\n      }\n    )\n\n    // Cleanup function\n    return () => {\n      if (scannerRef.current) {\n        scannerRef.current.clear()\n        scannerRef.current = null\n      }\n      if (scanTimeoutRef.current) {\n        clearTimeout(scanTimeoutRef.current)\n      }\n    }\n  }, [])\n\n  const validateQRCode = async (qrCode: string) => {\n    try {\n      setValidating(true)\n      setValidationResult(null)\n\n      const token = localStorage.getItem('token')\n      if (!token) {\n        message.error('Authentication required')\n        return\n      }\n\n      const response = await fetch('http://localhost:5001/api/student-menu/validate-qr', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({ qrCode })\n      })\n\n      const data = await response.json()\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Failed to validate QR code')\n      }\n\n      setValidationResult({\n        success: true,\n        message: data.message,\n        studentName: data.studentName,\n        mealType: data.mealType,\n        usedAt: data.usedAt\n      })\n      message.success('QR code validated successfully')\n    } catch (error) {\n      console.error('Error validating QR code:', error)\n      setValidationResult({\n        success: false,\n        message: error instanceof Error ? error.message : 'Failed to validate QR code'\n      })\n      message.error(error instanceof Error ? error.message : 'Failed to validate QR code')\n    } finally {\n      setValidating(false)\n    }\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"max-w-2xl mx-auto\">\n        <h1 className=\"text-2xl font-bold text-white mb-6\">QR Code Scanner</h1>\n        \n        <div className=\"bg-[#1a1b1e] border border-gray-800 rounded-2xl p-6 shadow-xl\">\n          <div id=\"qr-reader\" className=\"rounded-xl overflow-hidden\" />\n          \n          {validating && (\n            <div className=\"mt-4 p-4 bg-white/5 rounded-xl flex items-center gap-3\">\n              <Loader2 className=\"h-5 w-5 animate-spin text-blue-500\" />\n              <p className=\"text-gray-300\">Validating QR code...</p>\n            </div>\n          )}\n\n          {validationResult && (\n            <div className={`mt-4 p-4 ${validationResult.success ? 'bg-green-500/10' : 'bg-red-500/10'} rounded-xl`}>\n              <h3 className={`text-lg font-semibold ${validationResult.success ? 'text-green-400' : 'text-red-400'} mb-2`}>\n                {validationResult.success ? 'Validation Successful' : 'Validation Failed'}\n              </h3>\n              <div className=\"space-y-2\">\n                <p className=\"text-gray-300\">{validationResult.message}</p>\n                {validationResult.success && (\n                  <>\n                    {validationResult.studentName && (\n                      <p className=\"text-gray-300\">Student: {validationResult.studentName}</p>\n                    )}\n                    {validationResult.mealType && (\n                      <p className=\"text-gray-300\">Meal: {validationResult.mealType}</p>\n                    )}\n                    {validationResult.usedAt && (\n                      <p className=\"text-gray-300\">Used at: {new Date(validationResult.usedAt).toLocaleString()}</p>\n                    )}\n                  </>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n} \n"],"names":[],"mappings":"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","debugId":null}}]
}